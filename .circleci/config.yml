# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  node: circleci/node@5.0.2

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test:
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    docker:
      - image: cimg/python:3.8-node

    steps:
      - checkout

      - run:
          name: Create unified requirements so CircleCI can cache them
          command: |
            cat requirements.txt > requirements-all.txt
            echo >> requirements-all.txt  # blank in case new newline at end of requirements.txt
            cat requirements-test.txt >> requirements-all.txt

      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements-all.txt

      - run:
          name: Run python tests, save a coverage report, and save coverage percentage
          command: |
            pytest --cov=.  --cov-report=xml --cov-report=html --cov-report=term | tee pytest.out
            export NEW_PYTHON_PERCENT=$(cat pytest.out | grep TOTAL | awk '{print $4}' | grep -oE "[0-9]+" )
            echo ${NEW_PYTHON_PERCENT} > htmlcov/total_percent.txt
            echo Total python code coverage percentage is ${NEW_PYTHON_PERCENT}%

      - store_artifacts:
          path: htmlcov

      - node/install:
          install-yarn: false
          node-version: "16.13"

      - node/install-packages:
          pkg-manager: npm

      - run:
          name: Run deno tests, save a coverage report, and save coverage percentage
          command: |
            curl -fsSL https://deno.land/x/install/install.sh | sh
            export DENO_INSTALL="/home/circleci/.deno"
            export PATH="$DENO_INSTALL/bin:$PATH"
            npm test
            deno coverage --include="^file:" --exclude="test\\.(ts|js)|node_modules" cov_profile --lcov > cov_profile.lcov
            genhtml cov_profile.lcov --no-function-coverage > deno_cov.txt
            export NEW_JAVASCRIPT_PERCENT=${cat deno_cov.txt| grep "lines)" | awk '{print $2}' | grep -oE "[0-9\.]+"}
            echo ${NEW_JAVASCRIPT_PERCENT} > cov_profile/total_percent.txt
            echo Total javascript code coverage percentage is ${NEW_JAVASCRIPT_PERCENT}%

      - store_artifacts:
          path: cov_profile

      - run:
          name: Compare the actual code coverage to the minimum target coverage
          command: |
            export NEW_PYTHON_PERCENT=$(cat htmlcov/total_percent.txt)
            export NEW_JAVASCRIPT_PERCENT=$(cat cov_profile/total_percent.txt)
            echo Comparing the current code coverage percentage of ${NEW_PERCENT}% to the target of ${MIN_COVERAGE_PERCENT-85}%
            if [ "${NEW_PERCENT}" -lt ${MIN_COVERAGE_PERCENT-85} ]; then
              echo The total code coverage percentage of ${NEW_PERCENT}% is below the minimum of ${MIN_COVERAGE_PERCENT-85}%
              echo If you would like to modify the minimum coverage, set the MIN_COVERAGE_PERCENT environment variable
              exit 1
            fi
            echo Coverage is good.

      # Sonar cloud setup and scanning
      - run:
          name: Create sonar-scanner cache directory if it doesn't exist
          command: mkdir -p /tmp/cache/scanner
      - restore_cache:
          keys:
            - v1-sonarcloud-scanner-4.6.2.2472
      - run:
          name: SonarCloud
          command: |
            set -e
            VERSION=4.6.2.2472
            if [ -z "$SONAR_TOKEN" ]; then
                 echo "You must set SONAR_TOKEN environemnt variable"
                 exit 1
            fi
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            echo $SONAR_USER_HOME
            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
            fi

            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java
            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
          environment:
            SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
      - save_cache:
          key: v1-sonarcloud-scanner-4.6.2.2472
          paths: /tmp/cache/scanner

      - run:
          name: flake8 lint tests
          command: flake8 .

  dependency-check:
    docker:
      - image: cimg/python:3.8

    steps:
      - checkout

      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements-test.txt

      - run:
          name: Run depency check
          command: |
            export today=$(date "+%Y-%m-%d")

            # gather up the -i ignore IDs fro safety check
            export ignores=$(
            grep -vE "^\s*#" .safety.dependency.ignore |  # print out any non-comment line
              grep "[0-9]" |  # filter out any line that doesn't have a number in it
              awk -v "today=${today}" '{ if ($2 > today || $2 == "") print "-i", $1}' | # print any line with date after today
              xargs echo  # put all the output from previous command on one line
            )
            export command="safety check -r requirements.txt --full-report $ignores"

            echo "----------------------------------------------------"
            echo "If you need to modify the ignore list for the safety"
            echo "check, edit .safety.dependency.ignore file"
            echo "----------------------------------------------------"
            eval $command

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test:
    jobs:
      - test
      - dependency-check
